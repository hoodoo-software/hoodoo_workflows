name: 'Depploy Terraform IaC'

on:
  workflow_call:
    inputs:
      TERRAFORM_VAR_STRING:
        required: false
        type: string
      TERRAFORM_VAR_NAME:
        required: false
        type: string
      TERRAFORM_IAC_REPO:
        type: string
      TERRAFORM_IAC_REPO_PATH:
        type: string
    secrets:
      TF_API_TOKEN:
        required: true
      GIT_TOKEN:
        required: true
      MODULE_SSH_KEY:
        required: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      with:
        # Repository name with owner. For example, actions/checkout
        # Default: ${{ github.repository }}
        repository: ${{ inputs.TERRAFORM_IAC_REPO}}
        #path: ./${{ inputs.TERRAFORM_IAC_REPO_PATH }}
        ssh-key: ${{ secrets.GIT_TOKEN }}

    - name: Split Variable string
      run: |
        IFS=', ' read -a array <<< "${{ inputs.TERRAFORM_VAR_STRING }}"; echo "${array[@]}"
        echo "${#array[@]}"
        IFS=', ' read -a array_names <<< "${{ inputs.TERRAFORM_VAR_NAME }}"; echo "${array_names[@]}"
        echo "${#array_names[@]}"
        tree 
        cd ${{ inputs.TERRAFORM_IAC_REPO_PATH }}
        ls
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       working-directory: ./${{ inputs.TERRAFORM_IAC_REPO_PATH }}
#       run: terraform init
#       env:
#         GIT_SSH_COMMAND: "echo '${{ secrets.MODULE_SSH_KEY }}' > id_rsa && ssh-keyscan github.com > known_hosts && chmod 600 id_rsa known_hosts && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
    
    - name: ssh-add
      working-directory: ./${{ inputs.TERRAFORM_IAC_REPO_PATH }}
      run: |
        echo "${{ secrets.MODULE_SSH_KEY }}" > id_rsa
        ssh-keyscan github.com > known_hosts
        chmod 400 id_rsa known_hosts
        
    - name: 'terraform init'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_working_dir: ./${{ inputs.TERRAFORM_IAC_REPO_PATH }}
        tf_actions_version: 0.12.20
        tf_actions_subcommand: 'init'
        tf_actions_comment: true
      env:
        GIT_SSH_COMMAND: 'ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts'
      
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        terraform fmt -diff
        terraform fmt -check
        
        
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan -var ${{ inputs.TERRAFORM_VAR_NAME }}="${{ inputs.TERRAFORM_VAR_STRING }}" -no-color
      
      # On push to main, build or change infrastructure according to Terraform configuration files
#     - name: Terraform Apply
# #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#       run: terraform apply -auto-approve
